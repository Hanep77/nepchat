// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    hashedPassword String?
    createdAt      DateTime  @default(now())
    UpdatedAt      DateTime  @updatedAt

    accounts      Account[]
    messages      Message[]
    Conversations UserConversation[]
    seenMessages  Message[]          @relation("Seen")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Conversation {
    id            String   @id @default(cuid())
    createdAt     DateTime @default(now())
    lastMessageAt DateTime @default(now())
    name          String?
    isGroup       Boolean?

    messages Message[]
    users    UserConversation[]
}

model Message {
    id        String   @id @default(cuid())
    body      String?
    image     String?
    createdAt DateTime @default(now())
    seen      User[]   @relation("Seen")

    conversationId String
    conversation   Conversation @relation(fields: [conversationId], references: [id])
    senderId       String
    sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model UserConversation {
    userId         String
    conversationId String
    User           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    Conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    @@id([userId, conversationId])
}
